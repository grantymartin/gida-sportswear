{"filter":false,"title":"views.py","tooltip":"/products/views.py","undoManager":{"mark":7,"position":7,"stack":[[{"start":{"row":6,"column":0},"end":{"row":16,"column":0},"action":"remove","lines":["def all_products(request):","    \"\"\" A view to show all products, including sorting and search queries \"\"\"","","    products = Product.objects.all()","","    context = {","        'products': products,","    }","","    return render(request, 'products/products.html', context)",""],"id":60},{"start":{"row":6,"column":0},"end":{"row":29,"column":0},"action":"insert","lines":["def all_products(request):","    \"\"\" A view to show all products, including sorting and search queries \"\"\"","","    products = Product.objects.all()","    query = None","","    if request.GET:","        if 'q' in request.GET:","            query = request.GET['q']","            if not query:","                messages.error(request, \"You didn't enter any search criteria!\")","                return redirect(reverse('products'))","            ","            queries = Q(name__icontains=query) | Q(description__icontains=query)","            products = products.filter(queries)","","    context = {","        'products': products,","        'search_term': query,","    }","","    return render(request, 'products/products.html', context)","",""]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":61}],[{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from .models import Product",""],"id":62},{"start":{"row":0,"column":0},"end":{"row":3,"column":27},"action":"insert","lines":["from django.shortcuts import render, redirect, reverse, get_object_or_404","from django.contrib import messages","from django.db.models import Q","from .models import Product"]}],[{"start":{"row":0,"column":0},"end":{"row":27,"column":61},"action":"remove","lines":["from django.shortcuts import render, redirect, reverse, get_object_or_404","from django.contrib import messages","from django.db.models import Q","from .models import Product","# Create your views here.","","def all_products(request):","    \"\"\" A view to show all products, including sorting and search queries \"\"\"","","    products = Product.objects.all()","    query = None","","    if request.GET:","        if 'q' in request.GET:","            query = request.GET['q']","            if not query:","                messages.error(request, \"You didn't enter any search criteria!\")","                return redirect(reverse('products'))","            ","            queries = Q(name__icontains=query) | Q(description__icontains=query)","            products = products.filter(queries)","","    context = {","        'products': products,","        'search_term': query,","    }","","    return render(request, 'products/products.html', context)"],"id":63},{"start":{"row":0,"column":0},"end":{"row":36,"column":0},"action":"insert","lines":["from django.shortcuts import render, redirect, reverse, get_object_or_404","from django.contrib import messages","from django.db.models import Q","from .models import Product, Category","","# Create your views here.","","def all_products(request):","    \"\"\" A view to show all products, including sorting and search queries \"\"\"","","    products = Product.objects.all()","    query = None","    categories = None","","    if request.GET:","        if 'category' in request.GET:","            categories = request.GET['category'].split(',')","            products = products.filter(category__name__in=categories)","            categories = Category.objects.filter(name__in=categories)","","        if 'q' in request.GET:","            query = request.GET['q']","            if not query:","                messages.error(request, \"You didn't enter any search criteria!\")","                return redirect(reverse('products'))","            ","            queries = Q(name__icontains=query) | Q(description__icontains=query)","            products = products.filter(queries)","","    context = {","        'products': products,","        'search_term': query,","        'current_categories': categories,","    }","","    return render(request, 'products/products.html', context)",""]}],[{"start":{"row":0,"column":0},"end":{"row":36,"column":0},"action":"remove","lines":["from django.shortcuts import render, redirect, reverse, get_object_or_404","from django.contrib import messages","from django.db.models import Q","from .models import Product, Category","","# Create your views here.","","def all_products(request):","    \"\"\" A view to show all products, including sorting and search queries \"\"\"","","    products = Product.objects.all()","    query = None","    categories = None","","    if request.GET:","        if 'category' in request.GET:","            categories = request.GET['category'].split(',')","            products = products.filter(category__name__in=categories)","            categories = Category.objects.filter(name__in=categories)","","        if 'q' in request.GET:","            query = request.GET['q']","            if not query:","                messages.error(request, \"You didn't enter any search criteria!\")","                return redirect(reverse('products'))","            ","            queries = Q(name__icontains=query) | Q(description__icontains=query)","            products = products.filter(queries)","","    context = {","        'products': products,","        'search_term': query,","        'current_categories': categories,","    }","","    return render(request, 'products/products.html', context)",""],"id":64},{"start":{"row":0,"column":0},"end":{"row":54,"column":0},"action":"insert","lines":["from django.shortcuts import render, redirect, reverse, get_object_or_404","from django.contrib import messages","from django.db.models import Q","from .models import Product, Category","","# Create your views here.","","def all_products(request):","    \"\"\" A view to show all products, including sorting and search queries \"\"\"","","    products = Product.objects.all()","    query = None","    categories = None","    sort = None","    direction = None","","    if request.GET:","        if 'sort' in request.GET:","            sortkey = request.GET['sort']","            sort = sortkey","            if sortkey == 'name':","                sortkey = 'lower_name'","                products = products.annotate(lower_name=Lower('name'))","","            if 'direction' in request.GET:","                direction = request.GET['direction']","                if direction == 'desc':","                    sortkey = f'-{sortkey}'","            products = products.order_by(sortkey)","            ","        if 'category' in request.GET:","            categories = request.GET['category'].split(',')","            products = products.filter(category__name__in=categories)","            categories = Category.objects.filter(name__in=categories)","","        if 'q' in request.GET:","            query = request.GET['q']","            if not query:","                messages.error(request, \"You didn't enter any search criteria!\")","                return redirect(reverse('products'))","            ","            queries = Q(name__icontains=query) | Q(description__icontains=query)","            products = products.filter(queries)","","    current_sorting = f'{sort}_{direction}'","","    context = {","        'products': products,","        'search_term': query,","        'current_categories': categories,","        'current_sorting': current_sorting,","    }","","    return render(request, 'products/products.html', context)",""]}],[{"start":{"row":22,"column":70},"end":{"row":23,"column":0},"action":"insert","lines":["",""],"id":65},{"start":{"row":23,"column":0},"end":{"row":23,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":23,"column":12},"end":{"row":23,"column":16},"action":"remove","lines":["    "],"id":66}],[{"start":{"row":16,"column":3},"end":{"row":29,"column":49},"action":"remove","lines":[" if request.GET:","        if 'sort' in request.GET:","            sortkey = request.GET['sort']","            sort = sortkey","            if sortkey == 'name':","                sortkey = 'lower_name'","                products = products.annotate(lower_name=Lower('name'))","            ","","            if 'direction' in request.GET:","                direction = request.GET['direction']","                if direction == 'desc':","                    sortkey = f'-{sortkey}'","            products = products.order_by(sortkey)"],"id":67},{"start":{"row":16,"column":3},"end":{"row":29,"column":49},"action":"insert","lines":[" if request.GET:","        if 'sort' in request.GET:","            sortkey = request.GET['sort']","            sort = sortkey","            if sortkey == 'name':","                sortkey = 'lower_name'","                products = products.annotate(lower_name=Lower('name'))","            if sortkey == 'category':","                sortkey = 'category__name'","            if 'direction' in request.GET:","                direction = request.GET['direction']","                if direction == 'desc':","                    sortkey = f'-{sortkey}'","            products = products.order_by(sortkey)"]}]]},"ace":{"folds":[],"scrolltop":60,"scrollleft":0,"selection":{"start":{"row":29,"column":49},"end":{"row":29,"column":49},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":2,"state":"start","mode":"ace/mode/python"}},"timestamp":1592056067162,"hash":"701e2cbf12eeebb87d3466012b3c0ea058ddc178"}